buildscript {
    ext.kotlin_version = '1.3.72'
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

//plugins {
//    id 'com.github.johnrengelman.shadow' version '4.0.4'
//}


apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow' version '4.0.4'
apply plugin: "net.minecraftforge.gradle"
apply plugin: "kotlin"

group = 'com.gitlab.cable-mc'
version = '1.1.6'
archivesBaseName = 'cable-libs'

minecraft {
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}


repositories {
    maven { url = 'https://libraries.minecraft.net/' }
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net/' }
    maven {
        url 'http://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = 'Kotlin Early Access'
        url = 'https://dl.bintray.com/kotlin/kotlin-eap'
    }
    maven {
        name = 'Dokka'
        url = 'https://dl.bintray.com/kotlin/dokka'
    }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven { url = "https://hub.spigotmc.org/nexus/content/groups/public/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: kotlin_version
    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
    compile group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
    compile group: "org.jetbrains", name: "annotations", version: annotations_version
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
    compile "co.aikar:acf-core:0.5.0-SNAPSHOT"
    compile 'com.google.inject:guice:4.1.0'
    compile 'com.google.inject.extensions:guice-assistedinject:4.1.0'
    compile 'com.google.guava:guava:21.0'
}

// Testing ---------------
test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'io.mockk:mockk:1.9.3'
}
// -----------------------

shadowJar {
    classifier = null
    dependencies {
        include dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
        include dependency("org.jetbrains:annotations:${annotations_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}")
        include dependency("co.aikar:acf-core:0.5.0-SNAPSHOT")
        include dependency("co.aikar:locales:1.0-SNAPSHOT")
        include dependency("co.aikar:Table:1.0.0-SNAPSHOT")
        include dependency("co.aikar:DelegatingMap:1.0.0-SNAPSHOT")
        include dependency("co.aikar:minecraft-timings:1.0.4")
        include dependency('com.google.inject:guice:4.1.0')
        include dependency('com.google.inject.extensions:guice-assistedinject:4.1.0')
        include dependency('com.google.guava:guava:21.0')
        include dependency("javax.inject:javax.inject:1")
        include dependency("aopalliance:aopalliance:1.0")
    }
    relocate 'co.aikar.commands', 'com.cable.library.shaded.acf'
    relocate 'co.aikar.locales', 'com.cable.library.shaded.locales'

}

//reobf {
//    shadowJar {
////        mappingType = 'SEARGE'
//    }
//}


kotlinSourcesJar {
    from(sourceSets.main.kotlin.srcDirs)
}

processResources {
    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
//        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xexplicit-api=warning"]
    }
}
tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
    task.options.fork = true
}


tasks.build.dependsOn kotlinSourcesJar
tasks.build.dependsOn shadowJar
tasks.build.dependsOn reobfShadowJar


compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}